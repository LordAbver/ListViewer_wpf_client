//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ListViewer_wpf_client.AsRunServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceVersion", Namespace="http://schemas.datacontract.org/2004/07/Harris.Automation.ADC.Services.Common.Con" +
        "figuration")]
    [System.SerializableAttribute()]
    public partial class ServiceVersion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, System.Version> ServiceModulesVersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, System.Version> ServiceModulesVersion {
            get {
                return this.ServiceModulesVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceModulesVersionField, value) != true)) {
                    this.ServiceModulesVersionField = value;
                    this.RaisePropertyChanged("ServiceModulesVersion");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginSession", Namespace="http://schemas.datacontract.org/2004/07/Harris.Automation.ADC.Types")]
    [System.SerializableAttribute()]
    public partial class LoginSession : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AsRunEventDTO", Namespace="http://schemas.datacontract.org/2004/07/Harris.Automation.ADC.Services.Common.Dat" +
        "aTransferObjects.Events")]
    [System.SerializableAttribute()]
    public partial class AsRunEventDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ABoxSomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ADCEventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BBoxSomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte ChannelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompileSomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompileTapeStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ListViewer_wpf_client.AsRunServiceReference.ADCEventType EventTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HardStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ListNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OnAirDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OnAirTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReconcileKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SegmentNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ListViewer_wpf_client.AsRunServiceReference.AsRunStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ABoxSom {
            get {
                return this.ABoxSomField;
            }
            set {
                if ((object.ReferenceEquals(this.ABoxSomField, value) != true)) {
                    this.ABoxSomField = value;
                    this.RaisePropertyChanged("ABoxSom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ADCEventId {
            get {
                return this.ADCEventIdField;
            }
            set {
                if ((this.ADCEventIdField.Equals(value) != true)) {
                    this.ADCEventIdField = value;
                    this.RaisePropertyChanged("ADCEventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BBoxSom {
            get {
                return this.BBoxSomField;
            }
            set {
                if ((object.ReferenceEquals(this.BBoxSomField, value) != true)) {
                    this.BBoxSomField = value;
                    this.RaisePropertyChanged("BBoxSom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Channel {
            get {
                return this.ChannelField;
            }
            set {
                if ((this.ChannelField.Equals(value) != true)) {
                    this.ChannelField = value;
                    this.RaisePropertyChanged("Channel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompileId {
            get {
                return this.CompileIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CompileIdField, value) != true)) {
                    this.CompileIdField = value;
                    this.RaisePropertyChanged("CompileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompileSom {
            get {
                return this.CompileSomField;
            }
            set {
                if ((object.ReferenceEquals(this.CompileSomField, value) != true)) {
                    this.CompileSomField = value;
                    this.RaisePropertyChanged("CompileSom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompileTapeString {
            get {
                return this.CompileTapeStringField;
            }
            set {
                if ((object.ReferenceEquals(this.CompileTapeStringField, value) != true)) {
                    this.CompileTapeStringField = value;
                    this.RaisePropertyChanged("CompileTapeString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((object.ReferenceEquals(this.DurationField, value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ListViewer_wpf_client.AsRunServiceReference.ADCEventType EventType {
            get {
                return this.EventTypeField;
            }
            set {
                if ((this.EventTypeField.Equals(value) != true)) {
                    this.EventTypeField = value;
                    this.RaisePropertyChanged("EventType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HardStart {
            get {
                return this.HardStartField;
            }
            set {
                if ((this.HardStartField.Equals(value) != true)) {
                    this.HardStartField = value;
                    this.RaisePropertyChanged("HardStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ListNumber {
            get {
                return this.ListNumberField;
            }
            set {
                if ((this.ListNumberField.Equals(value) != true)) {
                    this.ListNumberField = value;
                    this.RaisePropertyChanged("ListNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OnAirDate {
            get {
                return this.OnAirDateField;
            }
            set {
                if ((object.ReferenceEquals(this.OnAirDateField, value) != true)) {
                    this.OnAirDateField = value;
                    this.RaisePropertyChanged("OnAirDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OnAirTime {
            get {
                return this.OnAirTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.OnAirTimeField, value) != true)) {
                    this.OnAirTimeField = value;
                    this.RaisePropertyChanged("OnAirTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReconcileKey {
            get {
                return this.ReconcileKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.ReconcileKeyField, value) != true)) {
                    this.ReconcileKeyField = value;
                    this.RaisePropertyChanged("ReconcileKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SegmentNumber {
            get {
                return this.SegmentNumberField;
            }
            set {
                if ((this.SegmentNumberField.Equals(value) != true)) {
                    this.SegmentNumberField = value;
                    this.RaisePropertyChanged("SegmentNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerName {
            get {
                return this.ServerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerNameField, value) != true)) {
                    this.ServerNameField = value;
                    this.RaisePropertyChanged("ServerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Som {
            get {
                return this.SomField;
            }
            set {
                if ((object.ReferenceEquals(this.SomField, value) != true)) {
                    this.SomField = value;
                    this.RaisePropertyChanged("Som");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ListViewer_wpf_client.AsRunServiceReference.AsRunStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ADCEventType", Namespace="http://schemas.datacontract.org/2004/07/Harris.Automation.ADC.Types.Events")]
    public enum ADCEventType : ushort {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Primary = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Break = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Logo = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BreakSync = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Secondary = 128,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryKey = 131,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryTransitionKey = 132,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryBacktime = 133,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryWithKey = 134,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryBacktimeGPI = 136,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryGPI = 137,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryTransitionAudioOver = 144,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryAudioOver = 145,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryWithAudioOver = 146,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryData = 160,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondarySystem = 164,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondarySystemBacktime = 165,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryRecordSwitch = 176,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondarySourceSwitch = 177,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryAudioROut = 178,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryRecordDevice = 181,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryComment = 224,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryCompileID = 225,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryAppendFlag = 226,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryBarterSpot = 227,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PrimaryWithData = 256,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryWithData = 384,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryWithDataBacktime = 389,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryDataWithData = 416,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryWithDataWithKey = 390,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryWithDataWithAudioOver = 402,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PrimaryReq = 768,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecondaryReq = 896,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Invalid = 65535,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AsRunStatus", Namespace="http://schemas.datacontract.org/2004/07/Harris.Automation.ADC.Services.Common.Dat" +
        "aTransferObjects")]
    public enum AsRunStatus : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AiredWithoutDiscrepancy = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TechnicalDifficulty = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DidNotAir = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AiredWithDurationDiscrepancy = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AiredWithContentDiscrepancy = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Preempted = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        JoinedInProgress = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InsertedByOperator = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MissingContent = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Skipped = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AsRunStatusMax = 11,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerStatus", Namespace="http://schemas.datacontract.org/2004/07/Harris.Automation.ADC.Types")]
    public enum ServerStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Connecting = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Connected = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disconnecting = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Aborted = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disconnected = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AsRunServiceReference.IAsRunService", CallbackContract=typeof(ListViewer_wpf_client.AsRunServiceReference.IAsRunServiceCallback))]
    public interface IAsRunService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHeartbeatableService/IsAlive", ReplyAction="http://tempuri.org/IHeartbeatableService/IsAliveResponse")]
        void IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHeartbeatableService/GetVersion", ReplyAction="http://tempuri.org/IHeartbeatableService/GetVersionResponse")]
        ListViewer_wpf_client.AsRunServiceReference.ServiceVersion GetVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAsRunService/RegisterAsRunListener", ReplyAction="http://tempuri.org/IAsRunService/RegisterAsRunListenerResponse")]
        bool RegisterAsRunListener(string server, int list);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsRunService/UnregisterAsRunListener")]
        void UnregisterAsRunListener(string server, int list);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsRunService/UnregisterAllAsRunListeners")]
        void UnregisterAllAsRunListeners(string server);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsRunService/RequestAsRun")]
        void RequestAsRun(ListViewer_wpf_client.AsRunServiceReference.LoginSession session, string server, int list, System.DateTime from, System.DateTime to, System.Guid requestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAsRunService/AsRunEnabled", ReplyAction="http://tempuri.org/IAsRunService/AsRunEnabledResponse")]
        bool AsRunEnabled(string server, int list);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAsRunService/RegisterConnectionStateListener", ReplyAction="http://tempuri.org/IAsRunService/RegisterConnectionStateListenerResponse")]
        bool RegisterConnectionStateListener(ListViewer_wpf_client.AsRunServiceReference.LoginSession session, string server);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsRunService/UnregisterConnectionStateListener")]
        void UnregisterConnectionStateListener(ListViewer_wpf_client.AsRunServiceReference.LoginSession session, string server);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAsRunService/GetAvailableDeviceServers", ReplyAction="http://tempuri.org/IAsRunService/GetAvailableDeviceServersResponse")]
        string[] GetAvailableDeviceServers(ListViewer_wpf_client.AsRunServiceReference.LoginSession session);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAsRunServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsRunService/OnAsRun")]
        void OnAsRun(string server, int list, ListViewer_wpf_client.AsRunServiceReference.AsRunEventDTO[] logAsRun, System.Guid requestId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsRunService/OnConnectionStateChange")]
        void OnConnectionStateChange(string server, ListViewer_wpf_client.AsRunServiceReference.ServerStatus serverStatus);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAsRunServiceChannel : ListViewer_wpf_client.AsRunServiceReference.IAsRunService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AsRunServiceClient : System.ServiceModel.DuplexClientBase<ListViewer_wpf_client.AsRunServiceReference.IAsRunService>, ListViewer_wpf_client.AsRunServiceReference.IAsRunService {
        
        public AsRunServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AsRunServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AsRunServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AsRunServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AsRunServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void IsAlive() {
            base.Channel.IsAlive();
        }
        
        public ListViewer_wpf_client.AsRunServiceReference.ServiceVersion GetVersion() {
            return base.Channel.GetVersion();
        }
        
        public bool RegisterAsRunListener(string server, int list) {
            return base.Channel.RegisterAsRunListener(server, list);
        }
        
        public void UnregisterAsRunListener(string server, int list) {
            base.Channel.UnregisterAsRunListener(server, list);
        }
        
        public void UnregisterAllAsRunListeners(string server) {
            base.Channel.UnregisterAllAsRunListeners(server);
        }
        
        public void RequestAsRun(ListViewer_wpf_client.AsRunServiceReference.LoginSession session, string server, int list, System.DateTime from, System.DateTime to, System.Guid requestId) {
            base.Channel.RequestAsRun(session, server, list, from, to, requestId);
        }
        
        public bool AsRunEnabled(string server, int list) {
            return base.Channel.AsRunEnabled(server, list);
        }
        
        public bool RegisterConnectionStateListener(ListViewer_wpf_client.AsRunServiceReference.LoginSession session, string server) {
            return base.Channel.RegisterConnectionStateListener(session, server);
        }
        
        public void UnregisterConnectionStateListener(ListViewer_wpf_client.AsRunServiceReference.LoginSession session, string server) {
            base.Channel.UnregisterConnectionStateListener(session, server);
        }
        
        public string[] GetAvailableDeviceServers(ListViewer_wpf_client.AsRunServiceReference.LoginSession session) {
            return base.Channel.GetAvailableDeviceServers(session);
        }
    }
}
